//// This file was generated by Google Gemini :p
use crate::{SharedState, Window};
use engine_api::{types::QAngle, CvarFlags, Engine};
use egui::{CollapsingHeader, DragValue, RichText, TextEdit, Color32};
/// A window designed to demonstrate and test all safe functionalities
/// of the `engine-api` crate.
#[derive(Debug)]
pub struct EngineApiDemoWindow {
    // Window state
    is_open: bool,
    // State for interactive widgets
    player_id_input: i32,
    user_id_input: i32,
    server_cmd_input: String,
    client_cmd_input: String,
    unrestricted_cmd_input: String,
    key_binding_input: String,
    load_model_input: String,
    cvar_name_input: String,
    cvar_str_input: String,
    cvar_float_input: f32,
    cvar_int_input: i32,
    view_angles_buffer: QAngle,
}
impl Default for EngineApiDemoWindow {
    fn default() -> Self {
        Self {
            is_open: true,
            player_id_input: 1,
            user_id_input: 1,
            server_cmd_input: "say Hello from server!".to_string(),
            client_cmd_input: "say Hello from client!".to_string(),
            unrestricted_cmd_input: "sv_cheats 1".to_string(),
            key_binding_input: "+jump".to_string(),
            load_model_input: "models/player.mdl".to_string(),
            cvar_name_input: "sv_cheats".to_string(),
            cvar_str_input: String::new(),
            cvar_float_input: 0.0,
            cvar_int_input: 0,
            view_angles_buffer: QAngle::default(),
        }
    }
}
impl Window for EngineApiDemoWindow {
    fn name(&self) -> &'static str { "Engine API Demo" }
    fn toggle(&mut self) { self.is_open = !self.is_open; }
    fn is_open(&self) -> bool { self.is_open }
    fn is_should_render(&self, shared_state: &SharedState, _engine: &engine_api::Engine) -> bool {
        shared_state.is_overlay_focused
    }
    fn draw(&mut self, ctx: &egui::Context, _shared_state: &mut SharedState, engine: &Engine) {
        let client = engine.client();
        egui::Window::new(self.name())
            .open(&mut self.is_open)
            .resizable(true)
            .default_width(450.0)
            .show(ctx, |ui| {
                ui.label("This window demonstrates the full safe API of the `engine-api` crate.");
                ui.separator();
                // === Section: General Game State ===
                CollapsingHeader::new("General Game State").default_open(true).show(ui, |ui| {
                    ui.label(format!("Is In Game: {}", client.is_in_game()));
                    ui.label(format!("Is Connected: {}", client.is_connected()));
                    ui.label(format!("Is Paused: {}", client.is_paused()));
                    ui.label(format!("Is Singleplayer: {}", client.is_singlplayer()));
                    ui.label(format!("Is Loading Map: {}", client.is_loading_map()));
                    ui.label(format!("Is Console Visible: {}", client.con_is_visible()));
                    ui.label(format!("Map Name: {}", client.get_level_name()));
                    ui.label(format!("Map Name (Short): {}", client.get_level_name_short()));
                    ui.label(format!("Last Timestamp: {}", client.get_last_time_stamp()));
                    let (w, h) = client.get_screen_size();
                    ui.label(format!("Screen Size: {}x{}", w, h));
                });
                // === Section: Player Information ===
                CollapsingHeader::new("Player Information").default_open(true).show(ui, |ui| {
                    let max_clients = client.get_max_clients();
                    let local_player_idx = client.get_local_player();
                    ui.label(format!("Max Clients: {}", max_clients));
                    ui.label(format!("Local Player Index: {}", local_player_idx));
                    ui.horizontal(|ui| {
                        ui.label("Player Index to Query:");
                        ui.add(DragValue::new(&mut self.player_id_input).range(1..=max_clients));
                    });
                    if let Some(info) = client.get_player_info(self.player_id_input) {
                        egui::Grid::new("player_info_grid").show(ui, |ui| {
                            ui.label("Name:"); ui.label(RichText::new(info.name()).color(Color32::YELLOW)); ui.end_row();
                            ui.label("User ID:"); ui.label(info.user_id.to_string()); ui.end_row();
                            ui.label("GUID (SteamID2):"); ui.label(info.guid()); ui.end_row();
                            ui.label("SteamID64 (xuid):"); ui.label(info.xuid.to_string()); ui.end_row();
                            ui.label("Is Bot:"); ui.label(info.fake_player.to_string()); ui.end_row();
                        });
                    } else {
                        ui.colored_label(Color32::RED, "Player not found or invalid index.");
                    }
                    ui.horizontal(|ui| {
                        ui.label("Get Player Index from User ID:");
                        ui.add(DragValue::new(&mut self.user_id_input));
                        ui.label(format!("-> Index: {}", client.get_player_for_user_id(self.user_id_input)));
                    });
                });
                // === Section: View Angles ===
                CollapsingHeader::new("View Angles").default_open(false).show(ui, |ui| {
                    let mut current_angles = QAngle::default();
                    client.get_view_angles(&mut current_angles);
                    ui.label(format!("Current: P={:.2}, Y={:.2}, R={:.2}", current_angles.x, current_angles.y, current_angles.z));
                    ui.horizontal(|ui| {
                        ui.label("New Angles:");
                        ui.add(DragValue::new(&mut self.view_angles_buffer.x).prefix("P: "));
                        ui.add(DragValue::new(&mut self.view_angles_buffer.y).prefix("Y: "));
                        ui.add(DragValue::new(&mut self.view_angles_buffer.z).prefix("R: "));
                    });
                    if ui.button("Set View Angles").clicked() {
                        client.set_view_angles(&self.view_angles_buffer);
                    }
                });
                // === Section: CVar Interaction ===
                CollapsingHeader::new("CVar Interaction").default_open(true).show(ui, |ui| {
                    ui.horizontal(|ui| {
                        ui.label("CVar Name:");
                        ui.add(TextEdit::singleline(&mut self.cvar_name_input).desired_width(f32::INFINITY));
                    });
                    if let Some(cvar) = engine.cvar_system().find_var(&self.cvar_name_input) {
                        ui.label(format!("Found CVar '{}'", self.cvar_name_input));
                        ui.label(format!("Flags: {:?}", cvar.get_flags()));
                        ui.collapsing("Modify Flags", |ui| {
                            egui::ScrollArea::vertical().max_height(150.0).show(ui, |ui| {
                                for flag in CvarFlags::all().iter() {
                                    // Some flags are dangerous to modify at runtime.
                                    let is_dangerous_flag = flag == CvarFlags::NEVER_AS_STRING
                                        || flag == CvarFlags::UNREGISTERED
                                        || flag == CvarFlags::GAMEDLL
                                        || flag == CvarFlags::CLIENTDLL;
                                    ui.add_enabled_ui(!is_dangerous_flag, |ui| {
                                        let mut is_set = cvar.is_flag_set(flag);
                                        let flag_name = format!("{:?}", flag);
                                        if ui.checkbox(&mut is_set, flag_name).changed() {
                                            if is_set {
                                                cvar.add_flags(flag);
                                            } else {
                                                cvar.remove_flags(flag);
                                            }
                                        }
                                    });
                                }
                            });
                        });
                        ui.separator();
                        ui.label(format!("String Value: {}", cvar.get_string()));
                        ui.label(format!("Float Value: {}", cvar.get_float()));
                        ui.label(format!("Int Value: {}", cvar.get_int()));
                        ui.separator();
                        ui.horizontal(|ui| {
                            if ui.button("Set String").clicked() { cvar.set_value_str(&self.cvar_str_input); }
                            ui.add(TextEdit::singleline(&mut self.cvar_str_input));
                        });
                        ui.horizontal(|ui| {
                            if ui.button("Set Float").clicked() { cvar.set_value_float(self.cvar_float_input); }
                            ui.add(DragValue::new(&mut self.cvar_float_input).speed(0.1));
                        });
                        ui.horizontal(|ui| {
                            if ui.button("Set Int").clicked() { cvar.set_value_int(self.cvar_int_input); }
                            ui.add(DragValue::new(&mut self.cvar_int_input));
                        });
                    } else {
                        ui.colored_label(Color32::RED, "CVar not found.");
                    }
                });
                // === Section: Commands & Misc ===
                CollapsingHeader::new("Commands & Misc").default_open(false).show(ui, |ui| {
                    ui.horizontal(|ui| {
                        if ui.button("Server Command").clicked() { client.server_cmd(&self.server_cmd_input, true); }
                        ui.add(TextEdit::singleline(&mut self.server_cmd_input).desired_width(f32::INFINITY));
                    });
                    ui.horizontal(|ui| {
                        if ui.button("Client Command").clicked() { client.client_cmd(&self.client_cmd_input); }
                        ui.add(TextEdit::singleline(&mut self.client_cmd_input).desired_width(f32::INFINITY));
                    });
                    ui.horizontal(|ui| {
                        if ui.button("Unrestricted Command").clicked() { client.execute_client_cmd_unrestricted(&self.unrestricted_cmd_input); }
                        ui.add(TextEdit::singleline(&mut self.unrestricted_cmd_input).desired_width(f32::INFINITY));
                    });
                    ui.separator();
                    ui.horizontal(|ui| {
                        ui.label("Lookup Key for Binding:");
                        ui.add(TextEdit::singleline(&mut self.key_binding_input));
                        ui.label(format!("-> Key: {}", client.key_lookup_binding(&self.key_binding_input)));
                    });
                    ui.horizontal(|ui| {
                        if ui.button("Load Model").clicked() {
                            let result = client.load_model(&self.load_model_input, false);
                            log::info!("DEMO: Load model result: {:?}", result); // Log to console, as we can't display a pointer
                                                                                    // are you sure? ._.
                        }
                        ui.add(TextEdit::singleline(&mut self.load_model_input));
                    });
                });
            });
    }
}
